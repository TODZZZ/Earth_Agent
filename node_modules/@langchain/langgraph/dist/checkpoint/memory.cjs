"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemorySaverAssertImmutable = exports.MemorySaver = void 0;
const base_js_1 = require("./base.cjs");
class MemorySaver extends base_js_1.BaseCheckpointSaver {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "storage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
    }
    get configSpecs() {
        return [
            {
                id: "threadId",
                name: "Thread ID",
                annotation: null,
                description: null,
                default: null,
                isShared: true,
                dependencies: null,
            },
        ];
    }
    get(config) {
        return this.storage[config.configurable?.threadId];
    }
    put(config, checkpoint) {
        this.storage[config.configurable?.threadId] = checkpoint;
    }
}
exports.MemorySaver = MemorySaver;
class MemorySaverAssertImmutable extends MemorySaver {
    constructor() {
        super();
        Object.defineProperty(this, "storageForCopies", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        this.storageForCopies = {};
        this.at = "end_of_step" /* CheckpointAt.END_OF_STEP */;
    }
    put(config, checkpoint) {
        const threadId = config.configurable?.threadId;
        if (!this.storageForCopies[threadId]) {
            this.storageForCopies[threadId] = {};
        }
        // assert checkpoint hasn't been modified since last written
        const saved = super.get(config);
        if (saved) {
            const savedTs = saved.ts;
            if (this.storageForCopies[threadId][savedTs]) {
                console.assert(this.storageForCopies[threadId][savedTs] === saved, "Checkpoint has been modified");
            }
        }
        this.storageForCopies[threadId][checkpoint.ts] = (0, base_js_1.copyCheckpoint)(checkpoint);
        return super.put(config, checkpoint);
    }
}
exports.MemorySaverAssertImmutable = MemorySaverAssertImmutable;
