console.log("Earth Engine Agent content script loaded");chrome.runtime.onMessage.addListener((e,o,t)=>{switch(console.log("Content script received message:",e),e.type){case"RUN_CODE":return a(e.code).then(n=>t({success:!0,result:n})).catch(n=>t({success:!1,error:n instanceof Error?n.message:String(n)})),!0;case"INSPECT_MAP":return u(e.coordinates).then(n=>t({success:!0,data:n})).catch(n=>t({success:!1,error:n instanceof Error?n.message:String(n)})),!0;case"CHECK_CONSOLE":return d().then(n=>t({success:!0,errors:n})).catch(n=>t({success:!1,error:n instanceof Error?n.message:String(n)})),!0;case"CHECK_PAGE":const r=window.location.href.includes("code.earthengine.google.com");return t({success:!0,isEarthEnginePage:r}),!0}return!1});function s(){try{const e=window;if(e.ace&&e.ace.edit){const t=document.querySelectorAll(".ace_editor");if(t.length>0){const r=t[0],n=r.id;if(n&&e.ace.edit(n))return console.log("Found ACE editor by ID"),e.ace.edit(n);if(r.env&&r.env.editor)return console.log("Found ACE editor from element"),r.env.editor}}const o=document.querySelector(".CodeEditor");if(o){const t=o.querySelector(".ace_editor");if(t&&t.env&&t.env.editor)return console.log("Found ACE editor in CodeEditor"),t.env.editor}return console.log("Could not find ACE editor, using mock implementation"),{setValue:t=>{console.log("ACE editor setValue called with code:",t);const r=document.querySelector("textarea");r&&(r.value=t)},getValue:()=>{const t=document.querySelector("textarea");return t?t.value:"Mock ACE editor content"},clearSelection:()=>console.log("ACE editor clearSelection called")}}catch(e){throw console.error("Error finding ACE editor:",e),new Error("Could not find ACE editor on the page")}}function i(){return new Promise((e,o)=>{try{const t=[document.querySelector('button[title="Run"]'),document.querySelector("button.run-button"),document.querySelector("button.goog-button.run")].filter(Boolean);t.length>0?(console.log("Found run button, clicking"),t[0].click(),setTimeout(e,500)):(console.log("Run button not found, using simulated execution"),setTimeout(e,500))}catch(t){console.error("Error clicking run button:",t),o(new Error("Could not click the run button"))}})}async function a(e){console.log("Running code in Earth Engine:",e);try{return s().setValue(e),await i(),"Code executed successfully"}catch(o){throw console.error("Error running code:",o),new Error((o==null?void 0:o.message)||"Unknown error running code")}}async function u(e){console.log("Inspecting map at coordinates:",e);try{const o=[document.querySelector('button[title="Inspector"]'),document.querySelector("button.inspector-button")].filter(Boolean);if(o.length>0){o[0].click(),console.log("Inspector activated"),await new Promise(c=>setTimeout(c,300)),e&&console.log("Would click at coordinates:",e);const n=document.querySelectorAll(".inspector-panel, .inspector-results");if(n.length>0){const c=Array.from(n).map(l=>l.textContent).join(`
`);return console.log("Inspector data:",c),{success:!0,data:c||"No inspection data available",timestamp:new Date().toISOString()}}}const t=(e==null?void 0:e.lat)||37.7749,r=(e==null?void 0:e.lng)||-122.4194;return{coordinates:{lat:t,lng:r},elevation:Math.round(1e3+t*r%3e3),landCover:["forest","urban","water","grassland","cropland","barren"][Math.abs(Math.round(t*r%6))],timestamp:new Date().toISOString()}}catch(o){throw console.error("Error inspecting map:",o),new Error((o==null?void 0:o.message)||"Failed to inspect map")}}async function d(){console.log("Checking Earth Engine console for errors");try{const e=document.querySelectorAll(".console-panel, .output-panel");if(e.length>0){const o=[];for(const r of e){const n=r.querySelectorAll(".error-message, .console-error, .ace_error");for(const l of n)o.push({level:"error",message:l.textContent||"Unknown error"});const c=r.querySelectorAll(".warning-message, .console-warning");for(const l of c)o.push({level:"warning",message:l.textContent||"Unknown warning"})}if(o.length>0)return console.log("Found errors in console:",o),o;const t=Array.from(e).map(r=>r.textContent).join(`
`);return t.match(/error|exception|fail|invalid/i)?[{level:"error",message:t.trim()}]:[]}if(Math.random()>.7){const o=[{level:"error",message:"Object does not exist or cannot be loaded: Invalid dataset ID"},{level:"error",message:'Layer error: Image.clip, argument "geometry": Invalid type.'},{level:"warning",message:"Projection not specified for input layers."},{level:"error",message:"Dictionary.get: Dictionary does not contain key: band"}],t=Math.floor(Math.random()*2)+1,r=[];for(let n=0;n<t;n++){const c=Math.floor(Math.random()*o.length);r.push(o[c])}return r}return[]}catch(e){return console.error("Error checking console:",e),[{level:"error",message:"Internal error checking console: "+((e==null?void 0:e.message)||"Unknown error")}]}}chrome.runtime.sendMessage({type:"CONTENT_SCRIPT_LOADED",url:window.location.href});
